import Head from "next/head";
import { Inter } from "next/font/google";
import { useForm } from "react-hook-form";
import axios from "./api/axios";
import { useState } from "react";
import UserInfoList from "../component/UserInfoList";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [userList, setUserList] = useState([]);
  const [isListNull, setIsListNull] = useState(0);

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm();

  const onSubmit = async (data) => {
    try {
      console.log(data);
      const res = await axios.post("/api/users", data);
      // console.log(res);
    } catch (err) {
      console.log(err);
    }
  };

  const handleGetUsers = async () => {
    try {
      const res = await axios.get("/api/users");
      if (res.status === 200) {
        setUserList(res.data);
        setIsListNull(0);
      }
    } catch (err) {
      // console.log(err);
      // console.log(isListNull);
      console.error("no data");
      setIsListNull(1);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="w-full max-w-md mx-auto mt-[10vh]"
          >
            <div className="grid grid-cols-2 gap-2">
              <label htmlFor="firstName" className="font-medium text-black">
                Firstname:
              </label>
              <input
                type="text"
                {...register("firstName", { required: true })}
                className="mt-2 w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
              />
            </div>
            {errors.firstName && (
              <p className="text-red-700">This field is required</p>
            )}
            <div className="grid grid-cols-2 gap-2">
              <label htmlFor="lastName" className="font-medium text-black">
                Lastname:
              </label>
              <input
                type="text"
                {...register("lastName", { required: true })}
                className="mt-2 w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
              />
            </div>
            {errors.lastName && (
              <p className="text-red-700">This field is required</p>
            )}
            <div className="grid grid-cols-2 gap-2">
              <label htmlFor="email" className="font-medium text-black">
                Email:
              </label>
              <input
                type="email"
                id="email"
                {...register("email", {
                  required: true,
                  pattern: /^\S+@\S+$/i
                })}
                className="mt-2 w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
              />
            </div>
            {errors.email && (
              <p className="text-red-700">
                Please enter a valid email address and can not be empty
              </p>
            )}
            <div className="grid grid-cols-2 gap-2">
              <label htmlFor="mobileNum" className="font-medium text-black">
                Phone Number:
              </label>
              <input
                {...register("mobileNum", {
                  pattern: {
                    value: /^[0-9]{10}$/i,
                    message: "Invalid phone number"
                  }
                })}
                className="mt-2 w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
              />
            </div>
            {errors.mobileNum && (
              <p className="text-red-700">Invalid phone number</p>
            )}
            <input
              type="submit"
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-2"
            />
          </form>
          <button
            onClick={handleGetUsers}
            className="bg-orange-400 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded mt-2 ml-12"
          >
            Show All user
          </button>
          {isListNull ? (
            <p className="text-red-700 text-lg font-semibold ml-12 mt-2">
              no users in data
            </p>
          ) : null}
          {userList && <UserInfoList userInfo={userList} />}
        </div>
      </main>
    </>
  );
}
